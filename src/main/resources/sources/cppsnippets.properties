LOCAL_LOAD_ARG_1=clocals.set($index, $arg);
LOCAL_LOAD_ARG_2=clocals.set($index, $arg);
LOCAL_LOAD_ARG_3=clocals.set($index, $arg);
LOCAL_LOAD_ARG_4=clocals.set($index, $arg);
LOCAL_LOAD_ARG_5=clocals.set($index, $arg);
LOCAL_LOAD_ARG_6=clocals.set($index, utils::cfi($arg));
LOCAL_LOAD_ARG_7=clocals.set2($index, $arg);
LOCAL_LOAD_ARG_8=clocals.set2($index, utils::cdl($arg));
LOCAL_LOAD_ARG_9=clocals.setref($index, $arg);
LOCAL_LOAD_ARG_10=clocals.setref($index, $arg);
LOCAL_LOAD_ARG_11=clocals.setref($index, $arg);

NOP=;
ACONST_NULL=cstack.pushref(nullptr);
ICONST_M1=cstack.push(-1);
ICONST_0=cstack.push(0);
ICONST_1=cstack.push(1);
ICONST_2=cstack.push(2);
ICONST_3=cstack.push(3);
ICONST_4=cstack.push(4);
ICONST_5=cstack.push(5);
LCONST_0=cstack.push2(0);
LCONST_1=cstack.push2(1);
FCONST_0=cstack.push(utils::cfi(0.0f));
FCONST_1=cstack.push(utils::cfi(1.0f));
FCONST_2=cstack.push(utils::cfi(2.0f));
DCONST_0=cstack.push2(utils::cdl(0.0));
DCONST_1=cstack.push2(utils::cdl(1.0));
BIPUSH=cstack.push($operand);
SIPUSH=cstack.push($operand);
LDC_STRING=cstack.pushref(env->NewStringUTF($_cstr_cst)); $trycatchhandler
LDC_STRING_S_VARS=$_cstr_cst
LDC_INT=cstack.push($cst);
LDC_FLOAT=cstack.push(utils::cfi($cst));
LDC_LONG=cstack.push2($cst);
LDC_DOUBLE=cstack.push2(utils::cdl($cst));
LDC_CLASS=if (jclass clazz = env->FindClass($_cstr_cst)) cstack.pushref(clazz); $trycatchhandler
LDC_CLASS_S_VARS=$_cstr_cst
ILOAD=cstack.push(clocals.get($var));
LLOAD=cstack.push2(clocals.get2($var));
FLOAD=cstack.push(clocals.get($var));
DLOAD=cstack.push2(clocals.get2($var));
ALOAD=cstack.pushref(clocals.getref($var));
IALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetIntArrayRegion((jintArray) cstack.fetchref(1), cstack.fetch(0), 1, (jint *) cstack.getptr(1)); cstack.popcnt(1); } $trycatchhandler
IALOAD_S_VARS=#NPE,#ERROR_DESC
IALOAD_S_CONST_NPE=java/lang/NullPointerException
IALOAD_S_CONST_ERROR_DESC=IALOAD npe
LALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetLongArrayRegion((jlongArray) cstack.fetchref(1), cstack.fetch(0), 1, (jlong *) cstack.getptr2(0)); } $trycatchhandler
LALOAD_S_VARS=#NPE,#ERROR_DESC
LALOAD_S_CONST_NPE=java/lang/NullPointerException
LALOAD_S_CONST_ERROR_DESC=LALOAD npe
FALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetFloatArrayRegion((jfloatArray) cstack.fetchref(1), cstack.fetch(0), 1, (jfloat *) cstack.getptr(1)); cstack.popcnt(1); } $trycatchhandler
FALOAD_S_VARS=#NPE,#ERROR_DESC
FALOAD_S_CONST_NPE=java/lang/NullPointerException
FALOAD_S_CONST_ERROR_DESC=FALOAD npe
DALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetDoubleArrayRegion((jdoubleArray) cstack.fetchref(1), cstack.fetch(0), 1, (jdouble *) cstack.getptr2(0)); } $trycatchhandler
DALOAD_S_VARS=#NPE,#ERROR_DESC
DALOAD_S_CONST_NPE=java/lang/NullPointerException
DALOAD_S_CONST_ERROR_DESC=DALOAD npe
AALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack.setref(1, env->GetObjectArrayElement((jobjectArray) cstack.fetchref(1), cstack.fetch(0))); cstack.popcnt(1); } $trycatchhandler
AALOAD_S_VARS=#NPE,#ERROR_DESC
AALOAD_S_CONST_NPE=java/lang/NullPointerException
AALOAD_S_CONST_ERROR_DESC=AALOAD npe
BALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetByteArrayRegion((jbyteArray) cstack.fetchref(1), cstack.fetch(0), 1, (jbyte *) cstack.getptr(1)); cstack.set(1, cstack.fetch(1) & 0xff); cstack.popcnt(1); } $trycatchhandler
BALOAD_S_VARS=#NPE,#ERROR_DESC
BALOAD_S_CONST_NPE=java/lang/NullPointerException
BALOAD_S_CONST_ERROR_DESC=BALOAD npe
CALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetCharArrayRegion((jcharArray) cstack.fetchref(1), cstack.fetch(0), 1, (jchar *) cstack.getptr(1)); cstack.set(1, cstack.fetch(1) & 0xffff); cstack.popcnt(1); } $trycatchhandler
CALOAD_S_VARS=#NPE,#ERROR_DESC
CALOAD_S_CONST_NPE=java/lang/NullPointerException
CALOAD_S_CONST_ERROR_DESC=CALOAD npe
SALOAD=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetShortArrayRegion((jshortArray) cstack.fetchref(1), cstack.fetch(0), 1, (jshort *) cstack.getptr(1)); cstack.set(1, cstack.fetch(1) & 0xffff); cstack.popcnt(1); } $trycatchhandler
SALOAD_S_VARS=#NPE,#ERROR_DESC
SALOAD_S_CONST_NPE=java/lang/NullPointerException
SALOAD_S_CONST_ERROR_DESC=SALOAD npe
ISTORE=clocals.set($var, cstack.pop());
LSTORE=clocals.set2($var, cstack.pop2());
FSTORE=clocals.set($var, cstack.pop());
DSTORE=clocals.set2($var, cstack.pop2());
ASTORE=clocals.setref($var, cstack.popref());
IASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetIntArrayRegion((jintArray) cstack.fetchref(2), cstack.fetch(1), 1, (jint *) cstack.getptr(0)); cstack.popcnt(3); } $trycatchhandler
IASTORE_S_VARS=#NPE,#ERROR_DESC
IASTORE_S_CONST_NPE=java/lang/NullPointerException
IASTORE_S_CONST_ERROR_DESC=IASTORE npe
LASTORE=if (cstack.fetchref(3) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetLongArrayRegion((jlongArray) cstack.fetchref(3), cstack.fetch(2), 1, (jlong *) cstack.getptr2(0)); cstack.popcnt(4); } $trycatchhandler
LASTORE_S_VARS=#NPE,#ERROR_DESC
LASTORE_S_CONST_NPE=java/lang/NullPointerException
LASTORE_S_CONST_ERROR_DESC=LASTORE npe
FASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetFloatArrayRegion((jfloatArray) cstack.fetchref(2), cstack.fetch(1), 1, (jfloat *) cstack.getptr(0)); cstack.popcnt(3); } $trycatchhandler
FASTORE_S_VARS=#NPE,#ERROR_DESC
FASTORE_S_CONST_NPE=java/lang/NullPointerException
FASTORE_S_CONST_ERROR_DESC=FASTORE npe
DASTORE=if (cstack.fetchref(3) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetDoubleArrayRegion((jdoubleArray) cstack.fetchref(3), cstack.fetch(2), 1, (jdouble *) cstack.getptr2(0)); cstack.popcnt(4); } $trycatchhandler
DASTORE_S_VARS=#NPE,#ERROR_DESC
DASTORE_S_CONST_NPE=java/lang/NullPointerException
DASTORE_S_CONST_ERROR_DESC=DASTORE npe
AASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetObjectArrayElement((jobjectArray) cstack.fetchref(2), cstack.fetch(1), cstack.fetchref(0)); cstack.popcnt(3); } $trycatchhandler
AASTORE_S_VARS=#NPE,#ERROR_DESC
AASTORE_S_CONST_NPE=java/lang/NullPointerException
AASTORE_S_CONST_ERROR_DESC=AASTORE npe
BASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetByteArrayRegion((jbyteArray) cstack.fetchref(2), cstack.fetch(1), 1, (jbyte *) cstack.getptr(0)); cstack.popcnt(3); } $trycatchhandler
BASTORE_S_VARS=#NPE,#ERROR_DESC
BASTORE_S_CONST_NPE=java/lang/NullPointerException
BASTORE_S_CONST_ERROR_DESC=BASTORE npe
CASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetCharArrayRegion((jcharArray) cstack.fetchref(2), cstack.fetch(1), 1, (jchar *) cstack.getptr(0)); cstack.popcnt(3); } $trycatchhandler
CASTORE_S_VARS=#NPE,#ERROR_DESC
CASTORE_S_CONST_NPE=java/lang/NullPointerException
CASTORE_S_CONST_ERROR_DESC=CASTORE npe
SASTORE=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, #NPE, $ERROR_DESC, $line); else { env->SetShortArrayRegion((jshortArray) cstack.fetchref(2), cstack.fetch(1), 1, (jshort *) cstack.getptr(0)); cstack.popcnt(3); } $trycatchhandler
SASTORE_S_VARS=#NPE,#ERROR_DESC
SASTORE_S_CONST_NPE=java/lang/NullPointerException
SASTORE_S_CONST_ERROR_DESC=SASTORE npe
POP=cstack.pop();
POP2=cstack.pop2();
DUP=memcpy(&cstack.data[cstack.sptr - 0], &cstack.data[cstack.sptr - 1], 1 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 1], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));    \n    memcpy(&cstack.refs[cstack.sptr - 0], &cstack.refs[cstack.sptr - 1], 1 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 1], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP_X1=memcpy(&cstack.data[cstack.sptr - 1], &cstack.data[cstack.sptr - 2], 2 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0])); \n    memcpy(&cstack.refs[cstack.sptr - 1], &cstack.refs[cstack.sptr - 2], 2 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP_X2=memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr - 3], 3 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 3], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0])); \n    memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr - 3], 3 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 3], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP2=memcpy(&cstack.data[cstack.sptr - 0], &cstack.data[cstack.sptr - 2], 2 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));   \n    memcpy(&cstack.refs[cstack.sptr - 0], &cstack.refs[cstack.sptr - 2], 2 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
DUP2_X1=memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr - 4], 4 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 4], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));\n    memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr - 4], 4 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 4], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
DUP2_X2=memcpy(&cstack.data[cstack.sptr - 4], &cstack.data[cstack.sptr - 6], 6 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 6], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));\n    memcpy(&cstack.refs[cstack.sptr - 4], &cstack.refs[cstack.sptr - 6], 6 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 6], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
SWAP={ jint temp = cstack.fetch(0); cstack.set(0, cstack.get(1)); cstack.set(1, temp); }
IADD=cstack.set(1, cstack.fetch(1) + cstack.fetch(0)); cstack.popcnt(1);
LADD=cstack.set2(1, cstack.fetch2(1) + cstack.fetch2(0)); cstack.popcnt(2);
FADD=cstack.set(1, utils::cfi(utils::cif(cstack.fetch(1)) + utils::cif(cstack.fetch(0)))); cstack.popcnt(1);
DADD=cstack.set2(1, utils::cdl(utils::cld(cstack.fetch2(1)) + utils::cld(cstack.fetch2(0)))); cstack.popcnt(2);
ISUB=cstack.set(1, cstack.fetch(1) - cstack.fetch(0)); cstack.popcnt(1);
LSUB=cstack.set2(1, cstack.fetch2(1) - cstack.fetch2(0)); cstack.popcnt(2);
FSUB=cstack.set(1, utils::cfi(utils::cif(cstack.fetch(1)) - utils::cif(cstack.fetch(0)))); cstack.popcnt(1);
DSUB=cstack.set2(1, utils::cdl(utils::cld(cstack.fetch2(1)) - utils::cld(cstack.fetch2(0)))); cstack.popcnt(2);
IMUL=cstack.set(1, cstack.fetch(1) * cstack.fetch(0)); cstack.popcnt(1);
LMUL=cstack.set2(1, cstack.fetch2(1) * cstack.fetch2(0)); cstack.popcnt(2);
FMUL=cstack.set(1, utils::cfi(utils::cif(cstack.fetch(1)) * utils::cif(cstack.fetch(0)))); cstack.popcnt(1);
DMUL=cstack.set2(1, utils::cdl(utils::cld(cstack.fetch2(1)) * utils::cld(cstack.fetch2(0)))); cstack.popcnt(2);
IDIV=if (cstack.fetch(0) == 0) utils::throw_re(env, #AE, #ERROR_DESC, $line); else { cstack.set(1, cstack.fetch(1) / cstack.fetch(0)); cstack.popcnt(1); } $trycatchhandler
IDIV_S_VARS=#AE,#ERROR_DESC
IDIV_S_CONST_AE=java/lang/ArithmeticException
IDIV_S_CONST_ERROR_DESC=IDIV / by 0
LDIV=if (cstack.fetch2(0) == 0) utils::throw_re(env, #AE, #ERROR_DESC, $line); else { cstack.set2(1, cstack.fetch2(1) / cstack.fetch2(0)); cstack.popcnt(2); } $trycatchhandler
LDIV_S_VARS=#AE,#ERROR_DESC
LDIV_S_CONST_AE=java/lang/ArithmeticException
LDIV_S_CONST_ERROR_DESC=LDIV / by 0
FDIV=cstack.set(1, utils::cfi(utils::cif(cstack.fetch(1)) / utils::cif(cstack.fetch(0)))); cstack.popcnt(1);
DDIV=cstack.set2(1, utils::cdl(utils::cld(cstack.fetch2(1)) / utils::cld(cstack.fetch2(0)))); cstack.popcnt(2);
IREM=if (cstack.fetch(0) == 0) utils::throw_re(env, #AE, #ERROR_DESC, $line); else { cstack.set(1, cstack.fetch(1) % cstack.fetch(0)); cstack.popcnt(1); } $trycatchhandler
IREM_S_VARS=#AE,#ERROR_DESC
IREM_S_CONST_AE=java/lang/ArithmeticException
IREM_S_CONST_ERROR_DESC=IREM % by 0
LREM=if (cstack.fetch2(0) == 0) utils::throw_re(env, #AE, #ERROR_DESC, $line); else { cstack.set2(1, cstack.fetch2(1) % cstack.fetch2(0)); cstack.popcnt(2); } $trycatchhandler
LREM_S_VARS=#AE,#ERROR_DESC
LREM_S_CONST_AE=java/lang/ArithmeticException
LREM_S_CONST_ERROR_DESC=LREM % by 0
FREM=cstack.set(1, utils::cfi(std::fmod(utils::cif(cstack.fetch(1)), utils::cif(cstack.fetch(0))))); cstack.popcnt(1);
DREM=cstack.set2(1, utils::cdl(std::fmod(utils::cld(cstack.fetch2(1)), utils::cld(cstack.fetch2(0))))); cstack.popcnt(2);
INEG=cstack.set(0, -cstack.fetch(0));
LNEG=cstack.set2(0, -cstack.fetch2(0));
FNEG=cstack.set(0, utils::cfi(-utils::cif(cstack.fetch(0))));
DNEG=cstack.set2(0, utils::cdl(-utils::cld(cstack.fetch2(0))));
ISHL=cstack.set(1, cstack.fetch(1) * (1 << (0x1f & cstack.fetch(0)))); cstack.popcnt(1);
LSHL=cstack.set2(1, cstack.fetch2(1) * (1LL << (0x1f & cstack.fetch2(0)))); cstack.popcnt(2);
ISHR=cstack.set(1, cstack.fetch(1) / (1 << (0x1f & cstack.fetch(0)))); cstack.popcnt(1);
LSHR=cstack.set2(1, cstack.fetch2(1) / (1LL << (0x1f & cstack.fetch2(0)))); cstack.popcnt(2);
IUSHR=cstack.set(1, cstack.fetch(1) << cstack.fetch(0)); cstack.popcnt(1);
LUSHR=cstack.set2(1, cstack.fetch2(1) << cstack.fetch2(0)); cstack.popcnt(2);
IAND=cstack.set(1, cstack.fetch(1) & cstack.fetch(0)); cstack.popcnt(1);
LAND=cstack.set2(1, cstack.fetch2(1) & cstack.fetch2(0)); cstack.popcnt(2);
IOR=cstack.set(1, cstack.fetch(1) | cstack.fetch(0)); cstack.popcnt(1);
LOR=cstack.set2(1, cstack.fetch2(1) | cstack.fetch2(0)); cstack.popcnt(2);
IXOR=cstack.set(1, cstack.fetch(1) ^ cstack.fetch(0)); cstack.popcnt(1);
LXOR=cstack.set2(1, cstack.fetch2(1) ^ cstack.fetch2(0)); cstack.popcnt(2);
IINC=clocals.set($var, clocals.get($var) + $incr);
I2L=cstack.push2((jlong) cstack.pop());
I2F=cstack.push(utils::cfi((jfloat) cstack.pop()));
I2D=cstack.push2(utils::cdl((jdouble) cstack.pop()));
L2I=cstack.push((jint) cstack.pop2());
L2F=cstack.push(utils::cfi((jfloat) cstack.pop2()));
L2D=cstack.push2(utils::cdl((jdouble) cstack.pop2()));
F2I=cstack.push(utils::cif(cstack.pop()));
F2L=cstack.push2((jlong) utils::cif(cstack.pop()));
F2D=cstack.push2(utils::cdl((jdouble) utils::cif(cstack.pop())));
D2I=cstack.push((jint) utils::cld(cstack.pop2()));
D2L=cstack.push2(utils::cld((jdouble) cstack.pop2()));
D2F=cstack.push(utils::cfi((jfloat) utils::cld(cstack.pop2())));
I2B=cstack.push((jbyte) (cstack.pop() & 0xff));
I2C=cstack.push((jchar) (cstack.pop() & 0xffff));
I2S=cstack.push((jshort) (cstack.pop() & 0xffff));
LCMP=cstack.set(3, (cstack.fetch2(1) == cstack.fetch2(0)) ? 0 : (cstack.fetch2(1) < cstack.fetch2(0) ? -1 : 1)); cstack.popcnt(3);
FCMPL={ jfloat value2 = utils::cif(cstack.pop()); jfloat value1 = utils::cif(cstack.pop()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1))); }
FCMPG={ jfloat value2 = utils::cif(cstack.pop()); jfloat value1 = utils::cif(cstack.pop()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1))); }
DCMPL={ jdouble value2 = utils::cld(cstack.pop2()); jdouble value1 = utils::cld(cstack.pop2()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1))); }
DCMPG={ jdouble value2 = utils::cld(cstack.pop2()); jdouble value1 = utils::cld(cstack.pop2()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1))); }
IFEQ=if (cstack.pop() == 0) goto $label;
IFNE=if (cstack.pop() != 0) goto $label;
IFLT=if (cstack.pop() < 0) goto $label;
IFLE=if (cstack.pop() <= 0) goto $label;
IFGT=if (cstack.pop() > 0) goto $label;
IFGE=if (cstack.pop() >= 0) goto $label;
IF_ICMPEQ=if (cstack.pop() == cstack.pop()) goto $label;
IF_ICMPNE=if (cstack.pop() != cstack.pop()) goto $label;
IF_ICMPLT=if (cstack.pop() > cstack.pop()) goto $label;
IF_ICMPLE=if (cstack.pop() >= cstack.pop()) goto $label;
IF_ICMPGT=if (cstack.pop() < cstack.pop()) goto $label;
IF_ICMPGE=if (cstack.pop() <= cstack.pop()) goto $label;
IF_ACMPEQ=if (env->IsSameObject(cstack.popref(), cstack.popref())) goto $label;
IF_ACMPNE=if (!env->IsSameObject(cstack.popref(), cstack.popref())) goto $label;
GOTO=goto $label;
IRETURN=return ($rettype) cstack.pop();
LRETURN=return ($rettype) cstack.pop2();
FRETURN=return ($rettype) cstack.pop();
DRETURN=return ($rettype) cstack.pop2();
ARETURN=return ($rettype) cstack.popref();
RETURN=return;
NEW=if (jclass clazz = env->FindClass($_cstr_desc)) { if (jobject obj = env->AllocObject(clazz)) { cstack.pushref(obj); } } $trycatchhandler
NEW_S_VARS=$_cstr_desc
ANEWARRAY=if (jclass clazz = env->FindClass($_cstr_desc)) { if (cstack.fetch(0) < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else cstack.pushref(env->NewObjectArray(cstack.pop(), clazz, nullptr)); } $trycatchhandler
ANEWARRAY_S_VARS=$_cstr_desc,#NASE,#ERROR_DESC
ANEWARRAY_S_CONST_NASE=java/lang/NegativeArraySizeException
ANEWARRAY_S_CONST_ERROR_DESC=ANEWARRAY array size < 0
ARRAYLENGTH=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack.push(env->GetArrayLength((jarray) cstack.popref())); $trycatchhandler
ARRAYLENGTH_S_VARS=#NPE,#ERROR_DESC
ARRAYLENGTH_S_CONST_NPE=java/lang/NullPointerException
ARRAYLENGTH_S_COSNT_ERROR_DESC=ARRAYLENGTH npe
ATHROW=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jthrowable exception = (jthrowable) cstack.popref(); env->Throw(exception); cstack.clear(); cstack.pushref(exception); } $trycatchhandler
ATHROW_S_VARS=#NPE,#ERROR_DESC
ATHROW_S_CONST_NPE=java/lang/NullPointerException
ATHROW_S_CONST_ERROR_DESC=ATHROW npe
INSTANCEOF=if (jclass clazz = env->FindClass($_cstr_desc)) cstack.push(cstack.fetchref(0) == nullptr ? cstack.popref() != nullptr : env->IsInstanceOf(cstack.popref(), clazz)); $trycatchhandler
INSTANCEOF_S_VARS=$_cstr_desc
MONITORENTER=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->MonitorEnter(cstack.popref()); $trycatchhandler
MONITORENTER_S_VARS=#NPE,#ERROR_DESC
MONITORENTER_S_CONST_NPE=java/lang/NullPointerException
MONITORENTER_S_CONST_ERROR_DESC=MONITORENTER npe
MONITOREXIT=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->MonitorExit(cstack.popref()); $trycatchhandler
MONITOREXIT_S_VARS=#NPE,#ERROR_DESC
MONITOREXIT_S_CONST_NPE=java/lang/NullPointerException
MONITOREXIT_S_CONST_ERROR_DESC=MONITORENTER npe
IFNULL=if (cstack.popref() == nullptr) goto $label;
IFNONNULL=if (cstack.popref() != nullptr) goto $label;
TABLESWITCH_START=switch (cstack.pop()) {
TABLESWITCH_PART=    case $index: goto $label; break;
TABLESWITCH_DEFAULT=    default: goto $label; break;
TABLESWITCH_END=}
LOOKUPSWITCH_START=switch (cstack.pop()) {
LOOKUPSWITCH_PART=    case $key: goto $label; break;
LOOKUPSWITCH_DEFAULT=    default: goto $label; break;
LOOKUPSWITCH_END=}
TRYCATCH_START=if (env->ExceptionCheck()) { cstack.clear(); jthrowable exception = env->ExceptionOccurred(); cstack.pushref(exception); if (!$handle) return ($rettype) 0;
TRYCATCH_CHECK=if (jclass clazz = env->FindClass($_cstr_exception_class)) { if (env->IsInstanceOf(exception, clazz)) { env->ExceptionClear(); goto $handler_block; } }
TRYCATCH_CHECK_S_VARS=$_cstr_exception_class
TRYCATCH_ANY_L=env->ExceptionClear(); goto $handler_block;
TRYCATCH_END=return ($rettype) 0; }

GETSTATIC_1=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetStaticBooleanField(clazz, field)); } } $trycatchhandler
GETSTATIC_1_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_2=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetStaticCharField(clazz, field)); } } $trycatchhandler
GETSTATIC_2_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_3=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetStaticByteField(clazz, field)); } } $trycatchhandler
GETSTATIC_3_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_4=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetStaticShortField(clazz, field)); } } $trycatchhandler
GETSTATIC_4_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_5=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetStaticIntField(clazz, field)); } } $trycatchhandler
GETSTATIC_5_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_6=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->GetStaticFloatField(clazz, field))); } } $trycatchhandler
GETSTATIC_6_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_7=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->GetStaticLongField(clazz, field)); } } $trycatchhandler
GETSTATIC_7_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_8=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->GetStaticDoubleField(clazz, field))); } } $trycatchhandler
GETSTATIC_8_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_9=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetStaticObjectField(clazz, field)); } } $trycatchhandler
GETSTATIC_9_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_10=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetStaticObjectField(clazz, field)); } } $trycatchhandler
GETSTATIC_10_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc
GETSTATIC_11=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetStaticObjectField(clazz, field)); } } $trycatchhandler
GETSTATIC_11_S_VARS=$_cstr_class,$_cstr_name,$_cstr_desc

GETFIELD_1=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetBooleanField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_1_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_1_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_1_S_CONST_ERROR_DESC=GETFIELD Boolean npe
GETFIELD_2=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetCharField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_2_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_2_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_2_S_CONST_ERROR_DESC=GETFIELD Char npe
GETFIELD_3=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetByteField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_3_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_3_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_3_S_CONST_ERROR_DESC=GETFIELD Byte npe
GETFIELD_4=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetShortField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_4_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_4_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_4_S_CONST_ERROR_DESC=GETFIELD Short npe
GETFIELD_5=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->GetIntField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_5_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_5_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_5_S_CONST_ERROR_DESC=GETFIELD Int npe
GETFIELD_6=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->GetFloatField(cstack.popref(), field))); } } $trycatchhandler
GETFIELD_6_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_6_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_6_S_CONST_ERROR_DESC=GETFIELD Float npe
GETFIELD_7=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->GetLongField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_7_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_7_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_7_S_CONST_ERROR_DESC=GETFIELD Long npe
GETFIELD_8=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->GetDoubleField(cstack.popref(), field))); } } $trycatchhandler
GETFIELD_8_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_8_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_8_S_CONST_ERROR_DESC=GETFIELD Double npe
GETFIELD_9=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetObjectField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_9_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_9_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_9_S_CONST_ERROR_DESC=GETFIELD Object npe
GETFIELD_10=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetObjectField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_10_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_10_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_10_S_CONST_ERROR_DESC=GETFIELD Object npe
GETFIELD_11=if (cstack.fetchref(0) == nullptr) utils::throw_re(env, %NPE, %ERROR_DESC, $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->GetObjectField(cstack.popref(), field)); } } $trycatchhandler
GETFIELD_11_S_VARS=%NPE,%ERROR_DESC,$_cstr_desc,$_cstr_name,$_cstr_class
GETFIELD_11_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_11_S_CONST_ERROR_DESC=GETFIELD Object npe

PUTSTATIC_1=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticBooleanField(clazz, field, (jboolean) cstack.pop()); } } $trycatchhandler
PUTSTATIC_1_S_VARS=
PUTSTATIC_2=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticCharField(clazz, field, (jchar) cstack.pop()); } } $trycatchhandler
PUTSTATIC_2_S_VARS=
PUTSTATIC_3=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticByteField(clazz, field, (jbyte) cstack.pop()); } } $trycatchhandler
PUTSTATIC_3_S_VARS=
PUTSTATIC_4=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticShortField(clazz, field, (jshort) cstack.pop()); } } $trycatchhandler
PUTSTATIC_4_S_VARS=
PUTSTATIC_5=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticIntField(clazz, field, (jint) cstack.pop()); } } $trycatchhandler
PUTSTATIC_5_S_VARS=
PUTSTATIC_6=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticFloatField(clazz, field, (jfloat) utils::cif(cstack.pop())); } } $trycatchhandler
PUTSTATIC_6_S_VARS=
PUTSTATIC_7=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticLongField(clazz, field, (jlong) cstack.pop2()); } } $trycatchhandler
PUTSTATIC_7_S_VARS=
PUTSTATIC_8=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticDoubleField(clazz, field, (jdouble) utils::cld(cstack.pop2())); } } $trycatchhandler
PUTSTATIC_8_S_VARS=
PUTSTATIC_9=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticObjectField(clazz, field, (jobject) cstack.popref()); } } $trycatchhandler
PUTSTATIC_9_S_VARS=
PUTSTATIC_10=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticObjectField(clazz, field, (jobject) cstack.popref()); } } $trycatchhandler
PUTSTATIC_10_S_VARS=
PUTSTATIC_11=if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetStaticFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetStaticObjectField(clazz, field, (jobject) cstack.popref()); } } $trycatchhandler
PUTSTATIC_11_S_VARS=

PUTFIELD_1=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Boolean npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetBooleanField(cstack.fetchref(1), field, (jboolean) cstack.fetch(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_1_S_VARS=
PUTFIELD_2=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Char npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetCharField(cstack.fetchref(1), field, (jchar) cstack.fetch(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_2_S_VARS=
PUTFIELD_3=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Byte npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetByteField(cstack.fetchref(1), field, (jbyte) cstack.fetch(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_3_S_VARS=
PUTFIELD_4=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Short npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetShortField(cstack.fetchref(1), field, (jshort) cstack.fetch(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_4_S_VARS=
PUTFIELD_5=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Int npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetIntField(cstack.fetchref(1), field, (jint) cstack.fetch(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_5_S_VARS=
PUTFIELD_6=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Float npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetFloatField(cstack.fetchref(1), field, (jfloat) utils::cif(cstack.fetch(0))); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_6_S_VARS=
PUTFIELD_7=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Long npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetLongField(cstack.fetchref(2), field, (jlong) cstack.fetch2(0)); cstack.popcnt(3); } } $trycatchhandler
PUTFIELD_7_S_VARS=
PUTFIELD_8=if (cstack.fetchref(2) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Double npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetDoubleField(cstack.fetchref(2), field, (jdouble) utils::cld(cstack.fetch2(0))); cstack.popcnt(3); } } $trycatchhandler
PUTFIELD_8_S_VARS=
PUTFIELD_9=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetObjectField(cstack.fetchref(1), field, (jobject) cstack.fetchref(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_9_S_VARS=
PUTFIELD_10=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetObjectField(cstack.fetchref(1), field, (jobject) cstack.fetchref(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_10_S_VARS=
PUTFIELD_11=if (cstack.fetchref(1) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "PUTFIELD Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jfieldID field = env->GetFieldID(clazz, $_cstr_name, $_cstr_desc)) { env->SetObjectField(cstack.fetchref(1), field, (jobject) cstack.fetchref(0)); cstack.popcnt(2); } } $trycatchhandler
PUTFIELD_11_S_VARS=

NEWARRAY_4=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Boolean array size < 0", $line); else cstack.pushref(env->NewBooleanArray(cstack.pop())); $trycatchhandler
NEWARRAY_4_S_VARS=
NEWARRAY_5=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Char array size < 0", $line); else cstack.pushref(env->NewCharArray(cstack.pop())); $trycatchhandler
NEWARRAY_5_S_VARS=
NEWARRAY_6=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Float array size < 0", $line); else cstack.pushref(env->NewFloatArray(cstack.pop())); $trycatchhandler
NEWARRAY_6_S_VARS=
NEWARRAY_7=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Double array size < 0", $line); else cstack.pushref(env->NewDoubleArray(cstack.pop())); $trycatchhandler
NEWARRAY_7_S_VARS=
NEWARRAY_8=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Byte array size < 0", $line); else cstack.pushref(env->NewByteArray(cstack.pop())); $trycatchhandler
NEWARRAY_8_S_VARS=
NEWARRAY_9=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Short array size < 0", $line); else cstack.pushref(env->NewShortArray(cstack.pop())); $trycatchhandler
NEWARRAY_9_S_VARS=
NEWARRAY_10=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Int array size < 0", $line); else cstack.pushref(env->NewIntArray(cstack.pop())); $trycatchhandler
NEWARRAY_10_S_VARS=
NEWARRAY_11=if (cstack.fetch(0) < 0) utils::throw_re(env, "java/lang/NegativeArraySizeException", "NEWARRAY Long array size < 0", $line); else cstack.pushref(env->NewLongArray(cstack.pop())); $trycatchhandler
NEWARRAY_11_S_VARS=

INVOKE_POPCNT=cstack.popcnt($count);

INVOKE_ARG_1=(jboolean) cstack.fetch($index)
INVOKE_ARG_2=(jchar) cstack.fetch($index)
INVOKE_ARG_3=(jbyte) cstack.fetch($index)
INVOKE_ARG_4=(jshort) cstack.fetch($index)
INVOKE_ARG_5=(jint) cstack.fetch($index)
INVOKE_ARG_6=(jfloat) utils::cif(cstack.fetch($index))
INVOKE_ARG_7=(jlong) cstack.fetch2raw($index)
INVOKE_ARG_8=(jdouble) utils::cld(cstack.fetch2raw($index))
INVOKE_ARG_9=(jarray) cstack.fetchref($index)
INVOKE_ARG_10=(jobject) cstack.fetchref($index)
INVOKE_ARG_11=(jobject) cstack.fetchref($index)

INVOKESPECIAL_0=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Void npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { env->CallNonvirtualVoidMethod(cstack.fetchref($object_offset), clazz, method$args); } } $trycatchhandler
INVOKESPECIAL_0_S_VARS=
INVOKESPECIAL_1=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Boolean npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallNonvirtualBooleanMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_1_S_VARS=
INVOKESPECIAL_2=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Char npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallNonvirtualCharMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_2_S_VARS=
INVOKESPECIAL_3=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Bye npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallNonvirtualByteMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_3_S_VARS=
INVOKESPECIAL_4=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Short npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallNonvirtualShortMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_4_S_VARS=
INVOKESPECIAL_5=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Int npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallNonvirtualIntMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_5_S_VARS=
INVOKESPECIAL_6=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Float npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->CallNonvirtualFloatMethod(cstack.fetchref($object_offset), clazz, method$args))); } } $trycatchhandler
INVOKESPECIAL_6_S_VARS=
INVOKESPECIAL_7=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Long npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->CallNonvirtualLongMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_7_S_VARS=
INVOKESPECIAL_8=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Double npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->CallNonvirtualDoubleMethod(cstack.fetchref($object_offset), clazz, method$args))); } } $trycatchhandler
INVOKESPECIAL_8_S_VARS=
INVOKESPECIAL_9=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_9_S_VARS=
INVOKESPECIAL_10=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_10_S_VARS=
INVOKESPECIAL_11=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKESPECIAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), clazz, method$args)); } } $trycatchhandler
INVOKESPECIAL_11_S_VARS=

INVOKEINTERFACE_0=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Void npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { env->CallVoidMethod(cstack.fetchref($object_offset), method$args); } } $trycatchhandler
INVOKEINTERFACE_0_S_VARS=
INVOKEINTERFACE_1=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Boolean npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallBooleanMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_1_S_VARS=
INVOKEINTERFACE_2=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Char npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallCharMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_2_S_VARS=
INVOKEINTERFACE_3=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Bye npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallByteMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_3_S_VARS=
INVOKEINTERFACE_4=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Short npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallShortMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_4_S_VARS=
INVOKEINTERFACE_5=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Int npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallIntMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_5_S_VARS=
INVOKEINTERFACE_6=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Float npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->CallFloatMethod(cstack.fetchref($object_offset), method$args))); } } $trycatchhandler
INVOKEINTERFACE_6_S_VARS=
INVOKEINTERFACE_7=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Long npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->CallLongMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_7_S_VARS=
INVOKEINTERFACE_8=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Double npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->CallDoubleMethod(cstack.fetchref($object_offset), method$args))); } } $trycatchhandler
INVOKEINTERFACE_8_S_VARS=
INVOKEINTERFACE_9=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_9_S_VARS=
INVOKEINTERFACE_10=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_10_S_VARS=
INVOKEINTERFACE_11=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEINTERFACE Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEINTERFACE_11_S_VARS=

INVOKEVIRTUAL_0=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Void npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { env->CallVoidMethod(cstack.fetchref($object_offset), method$args); } } $trycatchhandler
INVOKEVIRTUAL_0_S_VARS=
INVOKEVIRTUAL_1=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Boolean npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallBooleanMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_1_S_VARS=
INVOKEVIRTUAL_2=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Char npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallCharMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_2_S_VARS=
INVOKEVIRTUAL_3=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Bye npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallByteMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_3_S_VARS=
INVOKEVIRTUAL_4=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Short npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallShortMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_4_S_VARS=
INVOKEVIRTUAL_5=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Int npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallIntMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_5_S_VARS=
INVOKEVIRTUAL_6=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Float npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->CallFloatMethod(cstack.fetchref($object_offset), method$args))); } } $trycatchhandler
INVOKEVIRTUAL_6_S_VARS=
INVOKEVIRTUAL_7=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Long npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->CallLongMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_7_S_VARS=
INVOKEVIRTUAL_8=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Double npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->CallDoubleMethod(cstack.fetchref($object_offset), method$args))); } } $trycatchhandler
INVOKEVIRTUAL_8_S_VARS=
INVOKEVIRTUAL_9=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_9_S_VARS=
INVOKEVIRTUAL_10=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_10_S_VARS=
INVOKEVIRTUAL_11=if (cstack.fetchref($object_offset) == nullptr) utils::throw_re(env, "java/lang/NullPointerException", "INVOKEVIRTUAL Object npe", $line); else if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), method$args)); } } $trycatchhandler
INVOKEVIRTUAL_11_S_VARS=

INVOKESTATIC_0=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { env->CallStaticVoidMethod(clazz, method$args); } } $trycatchhandler
INVOKESTATIC_0_S_VARS=
INVOKESTATIC_1=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallStaticBooleanMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_1_S_VARS=
INVOKESTATIC_2=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallStaticCharMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_2_S_VARS=
INVOKESTATIC_3=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallStaticByteMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_3_S_VARS=
INVOKESTATIC_4=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallStaticShortMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_4_S_VARS=
INVOKESTATIC_5=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(env->CallStaticIntMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_5_S_VARS=
INVOKESTATIC_6=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push(utils::cfi(env->CallStaticFloatMethod(clazz, method$args))); } } $trycatchhandler
INVOKESTATIC_6_S_VARS=
INVOKESTATIC_7=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(env->CallStaticLongMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_7_S_VARS=
INVOKESTATIC_8=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.push2(utils::cdl(env->CallStaticDoubleMethod(clazz, method$args))); } } $trycatchhandler
INVOKESTATIC_8_S_VARS=
INVOKESTATIC_9=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallStaticObjectMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_9_S_VARS=
INVOKESTATIC_10=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallStaticObjectMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_10_S_VARS=
INVOKESTATIC_11=if (jclass clazz = env->FindClass($_cstr_class)) { if (jmethodID method = env->GetStaticMethodID(clazz, $_cstr_name, $_cstr_desc)) { cstack.pushref(env->CallStaticObjectMethod(clazz, method$args)); } } $trycatchhandler
INVOKESTATIC_11_S_VARS=

MULTIANEWARRAY=cstack.popcnt($count); cstack.pushref(utils::create_multidim_array(env, $count, cstack.data + cstack.sptr, std::string($_cstr_desc), $line)); $trycatchhandler
MULTIANEWARRAY_S_VARS=$_cstr_desc
CHECKCAST=if (jclass clazz = env->FindClass($_cstr_desc)) { if (cstack.fetchref(0) != nullptr && !env->IsAssignableFrom(env->GetObjectClass(cstack.fetchref(0)), clazz)) { env->ThrowNew(env->FindClass(#CCE), (std::string(#ERROR_DESC) + std::string($_cstr_desc)).c_str()); cstack.clear(); cstack.pushref(env->ExceptionOccurred()); } } $trycatchhandler
CHECKCAST_S_VARS=$_cstr_desc,#CCE,#ERROR_DESC
CHECKCAST_S_CONST_CCE=java/lang/ClassCastException
CHECKCAST_S_CONST_ERROR_DESC=cannot cast to 
