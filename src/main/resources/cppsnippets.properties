LOCAL_LOAD_ARG_1=clocals.set($index, $arg);
LOCAL_LOAD_ARG_2=clocals.set($index, $arg);
LOCAL_LOAD_ARG_3=clocals.set($index, $arg);
LOCAL_LOAD_ARG_4=clocals.set($index, $arg);
LOCAL_LOAD_ARG_5=clocals.set($index, $arg);
LOCAL_LOAD_ARG_6=clocals.set($index, cfi($argf));
LOCAL_LOAD_ARG_7=clocals.set2($index, $arg);
LOCAL_LOAD_ARG_8=clocals.set2($index, cdl($arg));
LOCAL_LOAD_ARG_9=clocals.setref($index, $arg);
LOCAL_LOAD_ARG_10=clocals.setref($index, $arg);
LOCAL_LOAD_ARG_11=clocals.setref($index, $arg);

NOP=;
ACONST_NULL=cstack.pushref(nullptr);
ICONST_M1=cstack.push(-1);
ICONST_0=cstack.push(0);
ICONST_1=cstack.push(1);
ICONST_2=cstack.push(2);
ICONST_3=cstack.push(3);
ICONST_4=cstack.push(4);
ICONST_5=cstack.push(5);
LCONST_0=cstack.push2(0);
LCONST_1=cstack.push2(1);
FCONST_0=cstack.push(cfi(0.0f));
FCONST_1=cstack.push(cfi(1.0f));
FCONST_2=cstack.push(cfi(2.0f));
DCONST_0=cstack.push2(cdl(0.0));
DCONST_1=cstack.push2(cdl(1.0));
BIPUSH=cstack.push($operand);
SIPUSH=cstack.push($operand);
LDC_STRING=cstack.pushref(env->NewStringUTF("$cst")); $trycatchhandler
LDC_INT=cstack.push($cst);
LDC_FLOAT=cstack.push(cfi($cstf));
LDC_LONG=cstack.push2($cst);
LDC_DOUBLE=cstack.push2(cdl($cst));
LDC_CLASS=cstack.pushref(env->FindClass("$cst")); $trycatchhandler
ILOAD=cstack.push(clocals.get($var));
LLOAD=cstack.push2(clocals.get2($var));
FLOAD=cstack.push(clocals.get($var));
DLOAD=cstack.push2(clocals.get2($var));
ALOAD=cstack.pushref(clocals.getref($var));
IALOAD=env->GetIntArrayRegion((jintArray) cstack.fetchref(1), cstack.fetch(0), 1, (jint *) cstack.getptr(1)); cstack.popcnt(1); $trycatchhandler
LALOAD=env->GetLongArrayRegion((jlongArray) cstack.fetchref(1), cstack.fetch(0), 1, (jlong *) cstack.getptr2(0)); $trycatchhandler
FALOAD=env->GetFloatArrayRegion((jfloatArray) cstack.fetchref(1), cstack.fetch(0), 1, (jfloat *) cstack.getptr(1)); cstack.popcnt(1); $trycatchhandler
DALOAD=env->GetDoubleArrayRegion((jdoubleArray) cstack.fetchref(1), cstack.fetch(0), 1, (jdouble *) cstack.getptr2(0)); $trycatchhandler
AALOAD=cstack.setref(1, env->GetObjectArrayElement((jobjectArray) cstack.fetchref(1), cstack.fetch(0))); cstack.popcnt(1); $trycatchhandler
BALOAD=env->GetByteArrayRegion((jbyteArray) cstack.fetchref(1), cstack.fetch(0), 1, (jbyte *) cstack.getptr(1)); cstack.popcnt(1); $trycatchhandler
CALOAD=env->GetCharArrayRegion((jcharArray) cstack.fetchref(1), cstack.fetch(0), 1, (jchar *) cstack.getptr(1)); cstack.popcnt(1); $trycatchhandler
SALOAD=env->GetShortArrayRegion((jshortArray) cstack.fetchref(1), cstack.fetch(0), 1, (jshort *) cstack.getptr(1)); cstack.popcnt(1); $trycatchhandler
ISTORE=clocals.set($var, cstack.pop());
LSTORE=clocals.set2($var, cstack.pop2());
FSTORE=clocals.set($var, cstack.pop());
DSTORE=clocals.set2($var, cstack.pop2());
ASTORE=clocals.setref($var, cstack.popref());
IASTORE=env->SetIntArrayRegion((jintArray) cstack.fetchref(2), cstack.fetch(1), 1, (jint *) cstack.getptr(0)); cstack.popcnt(3); $trycatchhandler
LASTORE=env->SetLongArrayRegion((jlongArray) cstack.fetchref(3), cstack.fetch(2), 1, (jlong *) cstack.getptr2(0)); cstack.popcnt(4); $trycatchhandler
FASTORE=env->SetFloatArrayRegion((jfloatArray) cstack.fetchref(2), cstack.fetch(1), 1, (jfloat *) cstack.getptr(0)); cstack.popcnt(3); $trycatchhandler
DASTORE=env->SetDoubleArrayRegion((jdoubleArray) cstack.fetchref(3), cstack.fetch(2), 1, (jdouble *) cstack.getptr2(0)); cstack.popcnt(4); $trycatchhandler
AASTORE=env->SetObjectArrayElement((jobjectArray) cstack.fetchref(2), cstack.fetch(1), cstack.fetchref(0)); cstack.popcnt(3); $trycatchhandler
BASTORE=env->SetByteArrayRegion((jbyteArray) cstack.fetchref(2), cstack.fetch(1), 1, (jbyte *) cstack.getptr(0)); cstack.popcnt(3); $trycatchhandler
CASTORE=env->SetCharArrayRegion((jcharArray) cstack.fetchref(2), cstack.fetch(1), 1, (jchar *) cstack.getptr(0)); cstack.popcnt(3); $trycatchhandler
SASTORE=env->SetShortArrayRegion((jshortArray) cstack.fetchref(2), cstack.fetch(1), 1, (jshort *) cstack.getptr(0)); cstack.popcnt(3); $trycatchhandler
POP=cstack.pop();
POP2=cstack.pop2();
DUP=memcpy(&cstack.data[cstack.sptr - 0], &cstack.data[cstack.sptr - 1], 1 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 1], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));    \n    memcpy(&cstack.refs[cstack.sptr - 0], &cstack.refs[cstack.sptr - 1], 1 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 1], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP_X1=memcpy(&cstack.data[cstack.sptr - 1], &cstack.data[cstack.sptr - 2], 2 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0])); \n    memcpy(&cstack.refs[cstack.sptr - 1], &cstack.refs[cstack.sptr - 2], 2 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP_X2=memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr - 3], 3 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 3], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0])); \n    memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr - 3], 3 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 3], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr++;
DUP2=memcpy(&cstack.data[cstack.sptr - 0], &cstack.data[cstack.sptr - 2], 2 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));   \n    memcpy(&cstack.refs[cstack.sptr - 0], &cstack.refs[cstack.sptr - 2], 2 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
DUP2_X1=memcpy(&cstack.data[cstack.sptr - 2], &cstack.data[cstack.sptr - 4], 4 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 4], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));\n    memcpy(&cstack.refs[cstack.sptr - 2], &cstack.refs[cstack.sptr - 4], 4 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 4], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
DUP2_X2=memcpy(&cstack.data[cstack.sptr - 4], &cstack.data[cstack.sptr - 6], 6 * sizeof(cstack.data[0])); memcpy(&cstack.data[cstack.sptr - 6], &cstack.data[cstack.sptr], 1 * sizeof(cstack.data[0]));\n    memcpy(&cstack.refs[cstack.sptr - 4], &cstack.refs[cstack.sptr - 6], 6 * sizeof(cstack.refs[0])); memcpy(&cstack.refs[cstack.sptr - 6], &cstack.refs[cstack.sptr], 1 * sizeof(cstack.refs[0]));\n    cstack.sptr += 2;
SWAP={ jint temp = cstack.fetch(0); cstack.set(0, cstack.get(1)); cstack.set(1, temp); }
IADD=cstack.set(1, cstack.fetch(1) + cstack.fetch(0)); cstack.popcnt(1);
LADD=cstack.set2(1, cstack.fetch2(1) + cstack.fetch2(0)); cstack.popcnt(2);
FADD=cstack.set(1, cfi(cif(cstack.fetch(1)) + cif(cstack.fetch(0)))); cstack.popcnt(1);
DADD=cstack.set2(1, cdl(cld(cstack.fetch2(1)) + cld(cstack.fetch2(0)))); cstack.popcnt(2);
ISUB=cstack.set(1, cstack.fetch(1) - cstack.fetch(0)); cstack.popcnt(1);
LSUB=cstack.set2(1, cstack.fetch2(1) - cstack.fetch2(0)); cstack.popcnt(2);
FSUB=cstack.set(1, cfi(cif(cstack.fetch(1)) - cif(cstack.fetch(0)))); cstack.popcnt(1);
DSUB=cstack.set2(1, cdl(cld(cstack.fetch2(1)) - cld(cstack.fetch2(0)))); cstack.popcnt(2);
IMUL=cstack.set(1, cstack.fetch(1) * cstack.fetch(0)); cstack.popcnt(1);
LMUL=cstack.set2(1, cstack.fetch2(1) * cstack.fetch2(0)); cstack.popcnt(2);
FMUL=cstack.set(1, cfi(cif(cstack.fetch(1)) * cif(cstack.fetch(0)))); cstack.popcnt(1);
DMUL=cstack.set2(1, cdl(cld(cstack.fetch2(1)) * cld(cstack.fetch2(0)))); cstack.popcnt(2);
IDIV=cstack.set(1, cstack.fetch(1) / cstack.fetch(0)); cstack.popcnt(1);
LDIV=cstack.set2(1, cstack.fetch2(1) / cstack.fetch2(0)); cstack.popcnt(2);
FDIV=cstack.set(1, cfi(cif(cstack.fetch(1)) / cif(cstack.fetch(0)))); cstack.popcnt(1);
DDIV=cstack.set2(1, cdl(cld(cstack.fetch2(1)) / cld(cstack.fetch2(0)))); cstack.popcnt(2);
IREM=cstack.set(1, cstack.fetch(1) % cstack.fetch(0)); cstack.popcnt(1);
LREM=cstack.set2(1, cstack.fetch2(1) % cstack.fetch2(0)); cstack.popcnt(2);
FREM=cstack.set(1, cfi(std::fmod(cif(cstack.fetch(1)), cif(cstack.fetch(0))))); cstack.popcnt(1);
DREM=cstack.set2(1, cdl(std::fmod(cld(cstack.fetch2(1)), cld(cstack.fetch2(0))))); cstack.popcnt(2);
INEG=cstack.set(0, -cstack.fetch(0));
LNEG=cstack.set2(0, -cstack.fetch2(0));
FNEG=cstack.set(0, cfi(-cif(cstack.fetch(0))));
DNEG=cstack.set2(0, cdl(-cld(cstack.fetch2(0))));
ISHL=cstack.set(1, cstack.fetch(1) * (1 << (0x1f & cstack.fetch(0)))); cstack.popcnt(1);
LSHL=cstack.set2(1, cstack.fetch2(1) * (1LL << (0x1f & cstack.fetch2(0)))); cstack.popcnt(2);
ISHR=cstack.set(1, cstack.fetch(1) / (1 << (0x1f & cstack.fetch(0)))); cstack.popcnt(1);
LSHR=cstack.set2(1, cstack.fetch2(1) / (1LL << (0x1f & cstack.fetch2(0)))); cstack.popcnt(2);
IUSHR=cstack.set(1, cstack.fetch(1) << cstack.fetch(0)); cstack.popcnt(1);
LUSHR=cstack.set2(1, cstack.fetch2(1) << cstack.fetch2(0)); cstack.popcnt(2);
IAND=cstack.set(1, cstack.fetch(1) & cstack.fetch(0)); cstack.popcnt(1);
LAND=cstack.set2(1, cstack.fetch2(1) & cstack.fetch2(0)); cstack.popcnt(2);
IOR=cstack.set(1, cstack.fetch(1) | cstack.fetch(0)); cstack.popcnt(1);
LOR=cstack.set2(1, cstack.fetch2(1) | cstack.fetch2(0)); cstack.popcnt(2);
IXOR=cstack.set(1, cstack.fetch(1) ^ cstack.fetch(0)); cstack.popcnt(1);
LXOR=cstack.set2(1, cstack.fetch2(1) ^ cstack.fetch2(0)); cstack.popcnt(2);
IINC=clocals.set($var, clocals.get($var) + $incr);
I2L=cstack.push2((jlong) cstack.pop());
I2F=cstack.push((jfloat) cstack.pop());
I2D=cstack.push2((jdouble) cstack.pop());
L2I=cstack.push((jint) cstack.pop2());
L2F=cstack.push((jfloat) cstack.pop2());
L2D=cstack.push2((jdouble) cstack.pop2());
F2I=cstack.push(cif(cstack.pop()));
F2L=cstack.push2((jlong) cif(cstack.pop()));
F2D=cstack.push2((jdouble) cif(cstack.pop()));
D2I=cstack.push((jint) cld(cstack.pop2()));
D2L=cstack.push2(cld(cstack.pop2()));
D2F=cstack.push((jfloat) cld(cstack.pop2()));
I2B=cstack.push((jbyte) (cstack.pop() & 0xff));
I2C=cstack.push((jchar) (cstack.pop() & 0xffff));
I2S=cstack.push((jshort) (cstack.pop() & 0xffff));
LCMP=cstack.set(3, (cstack.get2(2) == cstack.get2(0)) ? 0 : (cstack.get2(2) < cstack.get2(0) ? -1 : 1)); cstack.popcnt(3);
FCMPL={ jfloat value2 = cif(cstack.pop()); jfloat value1 = cif(cstack.pop()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1))); }
FCMPG={ jfloat value2 = cif(cstack.pop()); jfloat value1 = cif(cstack.pop()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1))); }
DCMPL={ jdouble value2 = cld(cstack.pop2()); jdouble value1 = cld(cstack.pop2()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1))); }
DCMPG={ jdouble value2 = cld(cstack.pop2()); jdouble value1 = cld(cstack.pop2()); cstack.push(value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1))); }
IFEQ=if (cstack.pop() == 0) goto $label;
IFNE=if (cstack.pop() != 0) goto $label;
IFLT=if (cstack.pop() < 0) goto $label;
IFLE=if (cstack.pop() <= 0) goto $label;
IFGT=if (cstack.pop() > 0) goto $label;
IFGE=if (cstack.pop() >= 0) goto $label;
IF_ICMPEQ=if (cstack.pop() == cstack.pop()) goto $label;
IF_ICMPNE=if (cstack.pop() != cstack.pop()) goto $label;
IF_ICMPLT=if (cstack.pop() > cstack.pop()) goto $label;
IF_ICMPLE=if (cstack.pop() >= cstack.pop()) goto $label;
IF_ICMPGT=if (cstack.pop() < cstack.pop()) goto $label;
IF_ICMPGE=if (cstack.pop() <= cstack.pop()) goto $label;
IF_ACMPEQ=if (env->IsSameObject(cstack.popref(), cstack.popref())) goto $label;
IF_ACMPNE=if (!env->IsSameObject(cstack.popref(), cstack.popref())) goto $label;
GOTO=goto $label;
IRETURN=return ($rettype) cstack.pop();
LRETURN=return ($rettype) cstack.pop2();
FRETURN=return ($rettype) cstack.pop();
DRETURN=return ($rettype) cstack.pop2();
ARETURN=return ($rettype) cstack.popref();
RETURN=return;
NEW=cstack.pushref(env->AllocObject(env->FindClass("$desc"))); $trycatchhandler
ANEWARRAY=cstack.pushref(env->NewObjectArray(cstack.pop(), env->FindClass("$desc"), nullptr)); $trycatchhandler
ARRAYLENGTH=cstack.push(env->GetArrayLength((jarray) cstack.popref())); $trycatchhandler
ATHROW={ jthrowable exception = (jthrowable) cstack.popref(); env->Throw(exception); cstack.clear(); cstack.pushref(exception); } $trycatchhandler
INSTANCEOF=cstack.push(cstack.fetchref(0) == nullptr ? 0 : env->IsInstanceOf(cstack.popref(), env->FindClass("$desc"))); $trycatchhandler
MONITORENTER=env->MonitorEnter(cstack.popref()); $trycatchhandler
MONITOREXIT=env->MonitorExit(cstack.popref()); $trycatchhandler
IFNULL=if (cstack.popref() == nullptr) goto $label;
IFNONNULL=if (cstack.popref() != nullptr) goto $label;
TABLESWITCH_START={\n        jint index = cstack.pop();
TABLESWITCH_PART=    if (index == $index) goto $label;
TABLESWITCH_END=}
LOOKUPSWITCH_START={\n        jint key = cstack.pop();
LOOKUPSWITCH_PART=    if (key == $key) goto $label;
LOOKUPSWITCH_END=}
TRYCATCH_START=if (env->ExceptionCheck()) { cstack.clear(); jthrowable exception = env->ExceptionOccurred(); cstack.pushref(exception); if (!$handle) return ($rettype) 0;
TRYCATCH_CHECK=if (env->IsInstanceOf(exception, env->FindClass("$exception_class"))) { env->ExceptionClear(); goto $handler_block; } 
TRYCATCH_ANY_L=env->ExceptionClear(); goto $handler_block;
TRYCATCH_END=return ($rettype) 0; }

GETSTATIC_1=cstack.push(env->GetStaticBooleanField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_2=cstack.push(env->GetStaticCharField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_3=cstack.push(env->GetStaticByteField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_4=cstack.push(env->GetStaticShortField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_5=cstack.push(env->GetStaticIntField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_6=cstack.push(cfi(env->GetStaticFloatField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc")))); $trycatchhandler
GETSTATIC_7=cstack.push2(env->GetStaticLongField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_8=cstack.push2(cdl(env->GetStaticDoubleField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc")))); $trycatchhandler
GETSTATIC_9=cstack.pushref(env->GetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_10=cstack.pushref(env->GetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETSTATIC_11=cstack.pushref(env->GetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler

GETFIELD_1=cstack.push(env->GetBooleanField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_2=cstack.push(env->GetCharField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_3=cstack.push(env->GetByteField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_4=cstack.push(env->GetShortField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_5=cstack.push(env->GetIntField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_6=cstack.push(cfi(env->GetFloatField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc")))); $trycatchhandler
GETFIELD_7=cstack.push2(env->GetLongField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_8=cstack.push2(cdl(env->GetDoubleField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc")))); $trycatchhandler
GETFIELD_9=cstack.pushref(env->GetObjectField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_10=cstack.pushref(env->GetObjectField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler
GETFIELD_11=cstack.pushref(env->GetObjectField(cstack.popref(), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"))); $trycatchhandler

PUTSTATIC_1=env->SetStaticBooleanField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jboolean) cstack.pop()); $trycatchhandler
PUTSTATIC_2=env->SetStaticCharField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jchar) cstack.pop()); $trycatchhandler
PUTSTATIC_3=env->SetStaticByteField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jbyte) cstack.pop()); $trycatchhandler
PUTSTATIC_4=env->SetStaticShortField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jshort) cstack.pop()); $trycatchhandler
PUTSTATIC_5=env->SetStaticIntField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jint) cstack.pop()); $trycatchhandler
PUTSTATIC_6=env->SetStaticFloatField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jfloat) cif(cstack.pop())); $trycatchhandler
PUTSTATIC_7=env->SetStaticLongField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jlong) cstack.pop2()); $trycatchhandler
PUTSTATIC_8=env->SetStaticDoubleField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jdouble) cld(cstack.pop2())); $trycatchhandler
PUTSTATIC_9=env->SetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.popref()); $trycatchhandler
PUTSTATIC_10=env->SetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.popref()); $trycatchhandler
PUTSTATIC_11=env->SetStaticObjectField(env->FindClass("$class"), env->GetStaticFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.popref()); $trycatchhandler

PUTFIELD_1=env->SetBooleanField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jboolean) cstack.fetch(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_2=env->SetCharField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jchar) cstack.fetch(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_3=env->SetByteField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jbyte) cstack.fetch(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_4=env->SetShortField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jshort) cstack.fetch(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_5=env->SetIntField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jint) cstack.fetch(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_6=env->SetFloatField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jfloat) cif(cstack.fetch(0))); cstack.popcnt(2); $trycatchhandler
PUTFIELD_7=env->SetLongField(cstack.fetchref(2), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jlong) cstack.fetch2(0)); cstack.popcnt(3); $trycatchhandler
PUTFIELD_8=env->SetDoubleField(cstack.fetchref(2), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jdouble) cld(cstack.fetch2(0))); cstack.popcnt(3); $trycatchhandler
PUTFIELD_9=env->SetObjectField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.fetchref(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_10=env->SetObjectField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.fetchref(0)); cstack.popcnt(2); $trycatchhandler
PUTFIELD_11=env->SetObjectField(cstack.fetchref(1), env->GetFieldID(env->FindClass("$class"), "$name", "$desc"), (jobject) cstack.fetchref(0)); cstack.popcnt(2); $trycatchhandler

NEWARRAY_4=cstack.pushref(env->NewBooleanArray(cstack.pop()));
NEWARRAY_5=cstack.pushref(env->NewCharArray(cstack.pop()));
NEWARRAY_6=cstack.pushref(env->NewFloatArray(cstack.pop()));
NEWARRAY_7=cstack.pushref(env->NewDoubleArray(cstack.pop()));
NEWARRAY_8=cstack.pushref(env->NewByteArray(cstack.pop()));
NEWARRAY_9=cstack.pushref(env->NewShortArray(cstack.pop()));
NEWARRAY_10=cstack.pushref(env->NewIntArray(cstack.pop()));
NEWARRAY_11=cstack.pushref(env->NewLongArray(cstack.pop()));

INVOKE_POPCNT=cstack.popcnt($count);

INVOKE_ARG_1=(jboolean) cstack.fetch($index)
INVOKE_ARG_2=(jchar) cstack.fetch($index)
INVOKE_ARG_3=(jbyte) cstack.fetch($index)
INVOKE_ARG_4=(jshort) cstack.fetch($index)
INVOKE_ARG_5=(jint) cstack.fetch($index)
INVOKE_ARG_6=(jfloat) cif(cstack.fetch($index))
INVOKE_ARG_7=(jlong) cstack.fetch2raw($index)
INVOKE_ARG_8=(jdouble) cld(cstack.fetch2raw($index))
INVOKE_ARG_9=(jobject) cstack.fetchref($index)
INVOKE_ARG_10=(jarray) cstack.fetchref($index)
INVOKE_ARG_11=(jmethod) cstack.fetchref($index)

INVOKEINTERFACE_0=env->CallNonvirtualVoidMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args); $trycatchhandler
INVOKEINTERFACE_1=cstack.push(env->CallNonvirtualBooleanMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_2=cstack.push(env->CallNonvirtualCharMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_3=cstack.push(env->CallNonvirtualByteMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_4=cstack.push(env->CallNonvirtualShortMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_5=cstack.push(env->CallNonvirtualIntMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_6=cstack.push(cfi(env->CallNonvirtualFloatMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKEINTERFACE_7=cstack.push2(env->CallNonvirtualLongMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_8=cstack.push2(cdl(env->CallNonvirtualDoubleMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKEINTERFACE_9=cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_10=cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEINTERFACE_11=cstack.pushref(env->CallNonvirtualObjectMethod(cstack.fetchref($object_offset), env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler

INVOKESPECIAL_0=env->CallVoidMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args); $trycatchhandler
INVOKESPECIAL_1=cstack.push(env->CallBooleanMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_2=cstack.push(env->CallCharMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_3=cstack.push(env->CallByteMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_4=cstack.push(env->CallShortMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_5=cstack.push(env->CallIntMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_6=cstack.push(cfi(env->CallFloatMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKESPECIAL_7=cstack.push2(env->CallLongMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_8=cstack.push2(cdl(env->CallDoubleMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKESPECIAL_9=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_10=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESPECIAL_11=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler

INVOKEVIRTUAL_0=env->CallVoidMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args); $trycatchhandler
INVOKEVIRTUAL_1=cstack.push(env->CallBooleanMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_2=cstack.push(env->CallCharMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_3=cstack.push(env->CallByteMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_4=cstack.push(env->CallShortMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_5=cstack.push(env->CallIntMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_6=cstack.push(cfi(env->CallFloatMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKEVIRTUAL_7=cstack.push2(env->CallLongMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_8=cstack.push2(cdl(env->CallDoubleMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKEVIRTUAL_9=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_10=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKEVIRTUAL_11=cstack.pushref(env->CallObjectMethod(cstack.fetchref($object_offset), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler

INVOKESTATIC_0=env->CallStaticVoidMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args); $trycatchhandler
INVOKESTATIC_1=cstack.push(env->CallStaticBooleanMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_2=cstack.push(env->CallStaticCharMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_3=cstack.push(env->CallStaticByteMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_4=cstack.push(env->CallStaticShortMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_5=cstack.push(env->CallStaticIntMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_6=cstack.push(cfi(env->CallStaticFloatMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKESTATIC_7=cstack.push2(env->CallStaticLongMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_8=cstack.push2(cdl(env->CallStaticDoubleMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args))); $trycatchhandler
INVOKESTATIC_9=cstack.pushref(env->CallStaticObjectMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_10=cstack.pushref(env->CallStaticObjectMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler
INVOKESTATIC_11=cstack.pushref(env->CallStaticObjectMethod(env->FindClass("$class"), env->GetMethodID(env->FindClass("$class"), "$name", "$desc")$args)); $trycatchhandler

MULTIANEWARRAY=cstack.popcnt($count); cstack.pushref(CreateMultiDimArray(env, $count, cstack.data + cstack.sptr, "$desc")); $trycatchhandler
CHECKCAST=if (!env->IsAssignableFrom(env->GetObjectClass(cstack.fetchref(0)), env->FindClass("$desc"))) { env->ThrowNew(env->FindClass("java/lang/ClassCastException"), "cannot cast"); cstack.clear(); cstack.pushref(env->ExceptionOccurred()); } $trycatchhandler